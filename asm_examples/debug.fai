; vim:sw=1:ts=1:et:tw=40

_start:
 ; First thing to do is to figure out
 ; where our output is going to go
 ;
 ; We'll try to find a monitor first
 set a [0x384c0001] ; monitor dev. id
 call [FindDevice]
 cmp a [-1] ; error result, naturally
 branchne [MonitorFound]

 ; No monitor found. Guess we'll have to
 ; hope for a debug console.
 set a [0xdeadbeef] ; debug console id
 call [FindDevice]
 cmp a [-1]
 branchne [ConsoleFound]

 ; Neither found. All we can do is panic
 ; here. We'll use a bad instruction.
 bad
 halt ; just in case

MonitorFound:
 ; FindDevice puts the address in B
 store b [g_MonitorAddr]

 ; The monitor will start in monochrome
 ; 40x20 character mode, with 4
 ; characters per word of video memory
 ;
 ; 40x20 / 4 = 200 words
 ;
 ; Let's clear them all.
 ; Remember, b = g_MonitorAddr
 set a [200]
 set c [0]

MonitorFound.clearLoop:
 cmp a [0]
 branche [MonitorFound.clearLoopEnd]
 store c [b] ; c = 0
 sub a [1]
 add b [1]
 branch [MonitorFound.clearLoop]

MonitorFound.clearLoopEnd:
 ; Since we have a monitor, we need a
 ; keyboard.
 set a [0x384c000e] ; keyboard dev. id
 call [FindDevice]
 cmp a [-1]
 branchne [KeyboardFound]

 ; If we don't have a keyboard, write an
 ; error message telling the user they
 ; need a keyboard, then halt
 set a [m_KeyboardNotFound]
 call [PrintString]
 halt

KeyboardFound:
 store a [g_KeyboardInt]
 store b [g_KeyboardAddr]

 branch [Main]

ConsoleFound:
 store a [g_ConsoleInt]
 store b [g_ConsoleAddr]

 branch [Main]

Main:
 ; Say hi!
 set a [m_Ready]
 call [PrintString]

 inthset [IntHandler]

 Main.Loop:
 call [Prompt]
 branch [Main.Loop]

Prompt:
 set a [m_Newline]
 call [PrintString]

 set a [m_Prompt]
 call [PrintString]

 call [ReadChar]
 call [PrintChar]

 cmp a ['d']
 branche [DumpMem]

 cmp a ['q']
 branche [Quit]

 ret

DumpMem:
 set a [m_Newline]
 call [PrintString]

 ; start? ...
 set a [m_Start]
 call [PrintString]

 set a [m_Prompt]
 call [PrintString]

 call [ReadHexLine]
 push a

 set a ['\n']
 call [PrintChar]

 ; end? ...
 set a [m_End]
 call [PrintString]

 set a [m_Prompt]
 call [PrintString]

 call [ReadHexLine]
 push a

 set a ['\n']
 call [PrintChar]

 pop c
 pop d

 ; confirm?
 set a [m_Confirm]
 call [PrintString]

 set a [d]
 call [PrintHex]

 set a [m_Range]
 call [PrintString]

 set a [c]
 call [PrintHex]

 set a [m_YesNo]
 call [PrintString]

 call [ReadChar]
 cmp a ['y']
 branchne [DumpMem.ret]

 set a [m_Newline]
 call [PrintString]

 set a ['\n']
 call [PrintChar] ; extra newline

 ; mod 4 counter, determines newline
 set b [0]

 DumpMem.loop:
 cmp d [c]
 branche [DumpMem.ret]

 load a [d]
 call [PrintHex]

 add d [0x1]

 add b [1]
 and b [0b11] ; mod 4
 cmp b [0]
 branche [DumpMem.newline]

 set a [' ']
 call [PrintChar]
 branch [DumpMem.loop]

 DumpMem.newline:
 set a ['\r']
 call [PrintChar]
 set a ['\n']
 call [PrintChar]
 branch [DumpMem.loop]

 DumpMem.ret:
 ret

Quit:
 bad
 branch [Quit]

PrintString:
 push d
 push c
 push b
 push a

 ; length of string in bytes
 load b [a]
 add a [1]

 PrintString.wordLoop:
 ; byte-word magic
 ; a = word pointer
 ; d = byte counter
 set d [0]
 push a
 load a [a]

 PrintString.byteLoop:
 ; See if we're out of bytes
 cmp b [0]
 branche [PrintString.ret]

 call [PrintChar]

 ; next byte
 rsh a [8]
 sub b [1]

 add d [1]
 cmp d [4] ; next word?
 branchl [PrintString.byteLoop]

 PrintString.wordLoopNext:
 pop a
 add a [1]
 branch [PrintString.wordLoop]

 PrintString.ret:
 pop a
 pop a
 pop b
 pop c
 pop d
 ret

PrintHex:
 push c
 push b

 set b [32]
 set c [a]

 PrintHex.loop:
 cmp b [0]
 branche [PrintHex.ret]

 sub b [4]

 set a [c]
 rsh a [b]
 and a [0xf]

 add a ['0'] ; start of digits
 cmp a ['9' + 1] ; end of digits
 branchl [PrintHex.print]

 ; gap between digits and lower alpha
 add a ['a' - ('9' + 1)]

 PrintHex.print:
 call [PrintChar]

 branch [PrintHex.loop]

 PrintHex.ret:
 pop b
 pop c
 ret

PrintChar:
 push d
 push c
 push b
 push a

 and a [0xff]

 ; Do we need to use the console or the
 ; monitor?
 load b [g_MonitorAddr]
 cmp b [0]
 branche [PrintChar.Console]

 PrintChar.Monitor:
 load c [g_MonitorY]
 load d [g_MonitorX]

 cmp a ['\r']
 branche [PrintChar.monitorCR]
 cmp a ['\n']
 branche [PrintChar.monitorLF]

 ; Set c to current char index
 mul c [40] ; 40 chars per row
 add c [d]

 divmod c [4] ; c = word index,
              ; d = byte remainder
 mul d [8]    ; d = left shift amount

 ; Add word index to monitor base
 add b [c]
 ; Load that word for modification
 load c [b]

 ; Mask it
 push a
 set a [0xff]
 lsh a [d]
 not a
 and c [a]

 ; Replace
 pop a
 lsh a [d]
 or c [a]

 ; Store modified
 store c [b]

 ; Advance cursor
 load c [g_MonitorY]
 load d [g_MonitorX]

 add d [1]
 cmp d [40] ; end of line
 branchl [PrintChar.storeCursor]

 set d [0]

 PrintChar.monitorLF:
 add c [1]
 cmp c [20] ; end of screen
 branchl [PrintChar.storeCursor]

 call [MonitorScroll]
 sub c [1]

 branch [PrintChar.storeCursor]

 PrintChar.monitorCR:
 set d [0]

 PrintChar.storeCursor:
 store c [g_MonitorY]
 store d [g_MonitorX]
 branch [PrintChar.ret]

 PrintChar.Console:
 load d [g_ConsoleAddr]
 set b [0x1] ; int_message = Send
 store b [d]

 add d [0x2]
 store a [d] ; outgoing = (character)

 load d [g_ConsoleInt]
 inthw [d]

 PrintChar.ret:
 pop a
 pop b
 pop c
 pop d
 ret

MonitorScroll:
 push c
 push b
 push a

 load a [g_MonitorAddr]
 add a [10]

 set b [a]
 add b [210] ; full screen + 10

 MonitorScroll.loop:
 load c [a]
 sub a [10]
 store c [a]
 add a [10]

 cmp a [b]
 branche [MonitorScroll.ret]

 MonitorScroll.ret:
 pop a
 pop b
 pop c
 ret

ReadChar:
 intpause
 push c
 push b

 load b [g_ConsoleAddr]
 load c [g_ConsoleInt]

 set a [0]
 store a [g_ConsoleIncoming]

 store a [b] ; int_select = Ack
 inthw [c]
 intcont

 ReadChar.wait:
 load a [g_ConsoleIncoming]
 cmp a [0]
 branchne [ReadChar.received]
 halt
 branch [ReadChar.wait]

 ReadChar.received:
 intpause
 and a [0xff] ; truncate to char

 ; Make sure we clear incoming
 set b [0]
 store b [g_ConsoleIncoming]

 pop b
 pop c
 intcont
 ret

; hex in a
; char & (1 << 31) if error
; call with a = 1 to echo
ReadHex:
 cmp a [1]
 branchne [ReadHex.noEcho]

 call [ReadChar]
 call [PrintChar]
 branch [ReadHex.tryDecimal]

 ReadHex.noEcho:
 call [ReadChar]

 ReadHex.tryDecimal:
 cmp a ['0']
 branchl [ReadHex.retError]
 cmp a ['9']
 branchg [ReadHex.tryAlphaUpper]

 sub a ['0']
 ret

 ReadHex.tryAlphaUpper:
 cmp a ['A']
 branchl [ReadHex.retError]
 cmp a ['F']
 branchg [ReadHex.tryAlphaLower]

 sub a ['A' - 10]
 ret

 ReadHex.tryAlphaLower:
 cmp a ['a']
 branchl [ReadHex.retError]
 cmp a ['f']
 branchg [ReadHex.retError]

 sub a ['a' - 10]
 ret

 ReadHex.retError:
 or a [1 << 31]
 ret

ReadHexLine:
 push b
 set b [0]

 ReadHexLine.loop:
 set a [1]
 call [ReadHex]
 push a
 and a [1 << 31]
 cmp a [0]
 branche [ReadHexLine.ok]

 pop a
 cmp a ['\r' | (1 << 31)]
 branche [ReadHexLine.ret]

 ; Unrecognized character. Skip it
 branch [ReadHexLine.loop]

 ReadHexLine.ok:
 pop a
 and a [0xf]
 lsh b [4]
 or b [a]
 branch [ReadHexLine.loop]

 ReadHexLine.ret:
 set a [b]
 pop b
 ret

IntHandler:
 push b

 load b [g_ConsoleInt]
 cmp a [b]
 branche [IntHandler.console]

 branch [IntHandler.ret]

 IntHandler.console:
 load b [g_ConsoleAddr]
 add b [1]
 load b [b] ; incoming
 or b [1 << 31] ; set highest bit
 store b [g_ConsoleIncoming]
 branch [IntHandler.ret]

 IntHandler.ret:
 pop b
 intexit

; Args:
;  A = model number of device
; On success:
;  A = interrupt of device
;  B = start of memory of device
;  C = size of memory of device
; On failure:
;  A = -1
;  B = 0
;  C = 0
FindDevice:
 ; Device config ROM is at 0x1000
 ; Structure: .words
 ;  {model, interrupt,
 ;   memmap_base, memmap_size}
 set b [0x1000]

 FindDevice.loop:
 load c [b]
 cmp c [0]
 branche [FindDevice.notFound]
 cmp c [a]
 branche [FindDevice.found]
 add b [0x4]
 branch [FindDevice.loop]

 FindDevice.found:
 set c [b]
 add c [0x1]
 load a [c]
 add c [0x1]
 load b [c]
 add c [0x1]
 load c [c]
 branch [FindDevice.ret]

 FindDevice.notFound:
 set a [-1]
 set b [0]
 set c [0]

 FindDevice.ret:
 ret

; global vars
g_MonitorAddr:     .words {0}
g_MonitorX:        .words {0}
g_MonitorY:        .words {0}
g_KeyboardAddr:    .words {0}
g_KeyboardInt:     .words {0}
g_ConsoleAddr:     .words {0}
g_ConsoleInt:      .words {0}
g_ConsoleIncoming: .words {0}

; messages
m_Ready:
 .len_bytes LE"Ready"
m_Newline:
 .len_bytes LE"\r\n"
m_Where:
 .len_bytes LE"where"
m_Start:
 .len_bytes LE"start"
m_End:
 .len_bytes LE"end"
m_Confirm:
 .len_bytes LE"confirm "
m_Range:
 .len_bytes LE" .. "
m_YesNo:
 .len_bytes LE" (y/n)? "
m_Prompt:
 .len_bytes LE"? "
m_Point:
 .len_bytes LE"> "
m_KeyboardNotFound:
 .len_bytes LE"
\rKeyboard not found.
\rPlease install a keyboard and reset,
\ror use a debug console.
"
